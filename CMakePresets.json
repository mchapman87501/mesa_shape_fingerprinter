{
  "version": 6,
  "configurePresets": [
    {
      "name": "default",
      "description": "Default settings - compile with unit tests, without code coverage.",
      "hidden": false,
      "generator": "Ninja",
      "binaryDir": "${sourceDir}/build/default",
      "cacheVariables": {
        "CMAKE_BUILD_TYPE": "Debug",
        "CMAKE_EXPORT_COMPILE_COMMANDS": "YES",
        "SHAPE_FINGERPRINTS_BUILD_TESTS": "YES"
      }
    },
    {
      "name": "release",
      "description": "Compile a release build, with documentation.",
      "inherits": "default",
      "binaryDir": "${sourceDir}/build/release",
      "cacheVariables": {
        "CMAKE_BUILD_TYPE": "Release",
        "SHAPE_FINGERPRINTS_BUILD_DOCS": "YES"
      }
    },
    {
      "name": "coverage",
      "description": "Compile with unit tests, with code coverage",
      "inherits": "default",
      "binaryDir": "${sourceDir}/build/coverage",
      "cacheVariables": {
        "CMAKE_BUILD_TYPE": "Coverage"
      }
    },
    {
      "name": "ubuntu-clang-tidy",
      "description": "Ubuntu: use clang++ to ease use of clang-tidy -- I dunno how to avoid the hardwired clang++-<version>",
      "inherits": "default",
      "binaryDir": "${sourceDir}/build/ubuntu-clang-tidy",
      "cacheVariables": {
        "CMAKE_C_COMPILER": "/usr/bin/clang-20",
        "CMAKE_CXX_COMPILER": "/usr/bin/clang++-20"
      }
    }
  ],
  "buildPresets": [
    {
      "name": "default",
      "configurePreset": "default",
      "targets": ["all"]
    },
    {
      "name": "release",
      "configurePreset": "release",
      "targets": ["all"]
    },
    {
      "name": "coverage",
      "configurePreset": "coverage",
      "targets": ["all"]
    },
    {
      "name": "coverage-report",
      "configurePreset": "coverage",
      "targets": ["coverage_report_lcov"]
    },
    {
      "name": "ubuntu-clang-tidy",
      "configurePreset": "ubuntu-clang-tidy",
      "targets": ["all"]
    }
  ],
  "testPresets": [
    {
      "name": "default",
      "configurePreset": "default",
      "output": {
        "outputOnFailure": true
      },
      "execution": {
        "noTestsAction": "error",
        "stopOnFailure": true
      },
      "filter": {
        "include": {
          "label": "mesaac"
        },
        "exclude": {
          "label": "mesaac_benchmark"
        }
      }
    },
    {
      "name": "release",
      "inherits": "default",
      "configurePreset": "release"
    },
    {
      "name": "benchmark",
      "configurePreset": "default",
      "output": {
        "outputOnFailure": true
      },
      "execution": {
        "noTestsAction": "error",
        "stopOnFailure": true
      },
      "filter": {
        "include": {
          "label": "mesaac_benchmark"
        }
      }
    },
    {
      "name": "coverage",
      "inherits": "default",
      "configurePreset": "coverage"
    },
    {
      "name": "coverage-report",
      "configurePreset": "coverage",
      "output": {
        "outputOnFailure": true
      },
      "execution": {
        "noTestsAction": "error",
        "stopOnFailure": true
      },
      "filter": {
        "include": {
          "label": "mesaac"
        }
      }
    }
  ],
  "workflowPresets": [
    {
      "name": "coverage-report",
      "steps": [
        {
          "type": "configure",
          "name": "coverage"
        },
        {
          "type": "build",
          "name": "coverage"
        },
        {
          "type": "build",
          "name": "coverage-report"
        }
      ]
    },
    {
      "name": "release",
      "steps": [
        {
          "type": "configure",
          "name": "release"
        },
        {
          "type": "build",
          "name": "release"
        }
      ]
    }
  ]
}
